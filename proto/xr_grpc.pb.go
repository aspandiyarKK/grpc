// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/xr.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// XrClient is the client API for Xr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XrClient interface {
	GetCurrentRate(ctx context.Context, in *CurrRequest, opts ...grpc.CallOption) (*Response, error)
	Convert(ctx context.Context, in *ConvertRequest, opts ...grpc.CallOption) (*Response, error)
	GetHistoricalRate(ctx context.Context, in *HistoricalRequest, opts ...grpc.CallOption) (*Response, error)
}

type xrClient struct {
	cc grpc.ClientConnInterface
}

func NewXrClient(cc grpc.ClientConnInterface) XrClient {
	return &xrClient{cc}
}

func (c *xrClient) GetCurrentRate(ctx context.Context, in *CurrRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.Xr/GetCurrentRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xrClient) Convert(ctx context.Context, in *ConvertRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.Xr/Convert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xrClient) GetHistoricalRate(ctx context.Context, in *HistoricalRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.Xr/GetHistoricalRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XrServer is the server API for Xr service.
// All implementations must embed UnimplementedXrServer
// for forward compatibility
type XrServer interface {
	GetCurrentRate(context.Context, *CurrRequest) (*Response, error)
	Convert(context.Context, *ConvertRequest) (*Response, error)
	GetHistoricalRate(context.Context, *HistoricalRequest) (*Response, error)
	MustEmbedUnimplementedXrServer()
}

// UnimplementedXrServer must be embedded to have forward compatible implementations.
type UnimplementedXrServer struct {
}

func (UnimplementedXrServer) GetCurrentRate(context.Context, *CurrRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentRate not implemented")
}
func (UnimplementedXrServer) Convert(context.Context, *ConvertRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Convert not implemented")
}
func (UnimplementedXrServer) GetHistoricalRate(context.Context, *HistoricalRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoricalRate not implemented")
}
func (UnimplementedXrServer) mustEmbedUnimplementedXrServer() {}

// UnsafeXrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XrServer will
// result in compilation errors.
type UnsafeXrServer interface {
	mustEmbedUnimplementedXrServer()
}

func RegisterXrServer(s grpc.ServiceRegistrar, srv XrServer) {
	s.RegisterService(&Xr_ServiceDesc, srv)
}

func _Xr_GetCurrentRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XrServer).GetCurrentRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Xr/GetCurrentRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XrServer).GetCurrentRate(ctx, req.(*CurrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xr_Convert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XrServer).Convert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Xr/Convert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XrServer).Convert(ctx, req.(*ConvertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xr_GetHistoricalRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoricalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XrServer).GetHistoricalRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Xr/GetHistoricalRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XrServer).GetHistoricalRate(ctx, req.(*HistoricalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Xr_ServiceDesc is the grpc.ServiceDesc for Xr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Xr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Xr",
	HandlerType: (*XrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentRate",
			Handler:    _Xr_GetCurrentRate_Handler,
		},
		{
			MethodName: "Convert",
			Handler:    _Xr_Convert_Handler,
		},
		{
			MethodName: "GetHistoricalRate",
			Handler:    _Xr_GetHistoricalRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/xr.proto",
}
